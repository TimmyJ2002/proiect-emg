#include <WiFi.h>
#include <WebSocketsServer.h>

const char* ssid = "Leivis 2.4 GHz";
const char* password = "Levente.";

WebSocketsServer webSocket = WebSocketsServer(81);  // WebSocket port

unsigned long previousMillis = 0;
const long interval = 1;  // 5ms for 200Hz

// Buffer for high-resolution data
const int bufferSize = 200;  // Buffer size for 1-second storage at 200Hz
float timeArray[bufferSize];
float valueArray[bufferSize];
int dataIndex = 0;
unsigned long startTime = 0;

bool isRecording = false;

void setup() {
    Serial.begin(921600); // High baud rate for serial debugging

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");
    Serial.println(WiFi.localIP());

    // Start WebSocket server
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    webSocket.loop();  // Handle WebSocket events

    unsigned long currentMillis = millis();
    if (millis() - previousMillis >= interval) {
    previousMillis = millis();
    // Collect data
        // Live data reading
        float sensorValue = analogRead(34);  // Replace with actual sensor reading

        // Only send live data if clients are connected
        if (webSocket.connectedClients() > 0) {
            String message = String(sensorValue);
            webSocket.broadcastTXT(message);  // Send live data as text
        }

        // If recording, store data in buffers
        if (isRecording) {
            if (dataIndex == 0) {
                startTime = currentMillis;  // Record the start time for the first sample
            }

            float elapsedTime = (currentMillis - startTime) / 1000.0;  // Time in seconds
            timeArray[dataIndex] = (millis() - startTime) / 1000.0;
            valueArray[dataIndex] = sensorValue;
            dataIndex++;

            // If buffer is full, send the high-resolution data
            if (dataIndex >= bufferSize) {
                sendData();
                dataIndex = 0;  // Reset the index after sending
            }
        }
    }
}

// void sendData() {
//     if (dataIndex == 0) return;  // No data to send

//     // Send the number of samples
//     uint32_t num_samples = dataIndex;

    
//     webSocket.broadcastBIN((uint8_t*)&num_samples, sizeof(num_samples));

//     // Send time data
//     webSocket.broadcastBIN((uint8_t*)timeArray, sizeof(float) * dataIndex);

//     // Send sensor value data
//     webSocket.broadcastBIN((uint8_t*)valueArray, sizeof(float) * dataIndex);

//     Serial.println("High-resolution data sent");
// }

void sendData() {
    if (dataIndex == 0) return;  // No data to send

  for (int i = 0; i < dataIndex; i++) {
      Serial.printf("Time: %.3f, Value: %.3f\n", timeArray[i], valueArray[i]);
  }

    // Calculate the total buffer size: 4 bytes for num_samples + 2 arrays of floats
    size_t bufferSize = sizeof(uint32_t) + (dataIndex * 2 * sizeof(float));
    uint8_t buffer[bufferSize];

    // Pack the number of samples
    uint32_t num_samples = dataIndex;
    webSocket.broadcastBIN((uint8_t*)&num_samples, sizeof(num_samples)); // Header
  webSocket.broadcastBIN((uint8_t*)timeArray, sizeof(float) * dataIndex);
  webSocket.broadcastBIN((uint8_t*)valueArray, sizeof(float) * dataIndex);


    // Send the combined buffer as binary data
    webSocket.broadcastBIN(buffer, bufferSize);

    Serial.println("High-resolution data sent");
}



void webSocketEvent(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
    switch (type) {
        case WStype_DISCONNECTED:
            Serial.printf("Client %u disconnected\n", num);
            
            // Check if no clients are connected
            if (webSocket.connectedClients() == 0) {
                isRecording = false;
                Serial.println("No clients connected. Recording stopped.");
            }
            break;

        case WStype_CONNECTED:
            Serial.printf("Client %u connected\n", num);
            break;

        case WStype_TEXT: {
            String message = String((char*)payload);
            if (message == "TOGGLE_RECORDING") {
                isRecording = !isRecording;
                Serial.println(isRecording ? "Recording started" : "Recording stopped");

                // Send confirmation back to the client
                webSocket.sendTXT(num, isRecording ? "Recording: ON" : "Recording: OFF");
            }
            break;
        }
        default:
            break;
    }
}
